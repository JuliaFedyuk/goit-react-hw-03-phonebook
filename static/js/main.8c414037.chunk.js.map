{"version":3,"sources":["Components/Container/Container.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","index.js"],"names":["Container","children","className","ContactForm","state","name","number","nameInputId","uuidv4","numberInputId","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","type","pattern","title","required","onChange","Component","ContactList","contacts","onDeleteContact","map","id","onClick","Filter","App","filter","formSubmitHandler","contact","toLowerCase","includes","alert","prevState","deleteContact","contactId","changeFilter","filterContacts","filterNormalize","componentDidMount","localStorage","getItem","parsedContacts","JSON","parse","componentDidUpdate","prevProps","setItem","stringify","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c414037.chunk.js","sourcesContent":["import React from 'react';\nimport './Container.scss';\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nexport default Container;\n","import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport './ContactForm.scss';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <label className=\"input_label\">\n          Name\n          <input\n            className=\"form_input\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label className=\"input_label\">\n          Number\n          <input\n            className=\"form_input\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            required\n            value={this.state.number}\n            onChange={this.handleChange}\n          />\n        </label>\n        <button className=\"submit_button\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport './ContactList.scss';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul className=\"contact_list\">\n      {contacts.map(({ id, name, number }) => (\n        <li className=\"contact_item\" key={id}>\n          <p className=\"contact_info\">\n            {name}: {number}\n          </p>\n          <button\n            className=\"add_button\"\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.number,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport './Filter.scss';\n\nconst Filter = ({ value, onChange }) => (\n  <label className=\"filter_label\">\n    Find contacts by name\n    <input\n      className=\"filter_input\"\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    ></input>\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\nexport default Filter;\n","import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport Container from './Components/Container/Container';\nimport ContactForm from './Components/ContactForm/ContactForm';\nimport ContactList from './Components/ContactList/ContactList';\nimport Filter from './Components/Filter/Filter';\nimport './App.scss';\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  formSubmitHandler = ({ name, number }) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    const getName = this.state.contacts.map(contact =>\n      contact.name.toLowerCase(),\n    );\n\n    if (getName.includes(contact.name.toLowerCase())) {\n      alert(`${contact.name} is already in contacts`);\n    } else {\n      this.setState(prevState => ({\n        contacts: [contact, ...prevState.contacts],\n      }));\n    }\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  filterContacts = () => {\n    const { contacts, filter } = this.state;\n    const filterNormalize = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterNormalize),\n    );\n  };\n\n  componentDidMount = () => {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n    this.setState({ contacts: parsedContacts });\n  };\n\n  componentDidUpdate = (prevProps, prevState) => {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  };\n\n  render() {\n    const filter = this.state.filter;\n    const visibleContacts = this.filterContacts();\n    return (\n      <Container>\n        <h1 className=\"main_title\">Phonebook</h1>\n        <ContactForm onSubmit={this.formSubmitHandler} />\n        <h2 className=\"contacts_title\">Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactList\n          contacts={visibleContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </Container>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/base.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}